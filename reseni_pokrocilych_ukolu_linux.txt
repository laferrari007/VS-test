# Řešení pokročilých úkolů pro Linux a DevOps

1. Automatizace infrastruktury s Ansible
- Ukázkový playbook:
```yaml
- hosts: webservers
  become: yes
  tasks:
    - name: Instalace Apache
      apt:
        name: apache2
        state: present
    - name: Kopírování index.html
      copy:
        src: ./index.html
        dest: /var/www/html/index.html
```
- Spuštění: `ansible-playbook -i inventory.ini playbook.yml`

2. Správa kontejnerů s Docker Compose
- Ukázka docker-compose.yml:
```yaml
version: '3'
services:
  web:
    image: nginx
    ports:
      - "8080:80"
    volumes:
      - ./html:/usr/share/nginx/html
  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - db_data:/var/lib/postgresql/data
volumes:
  db_data:
```
- Spuštění: `docker-compose up -d`

3. Orchestrace s Kubernetes
- Deployment:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
```
- Aplikace: `kubectl apply -f deployment.yaml`

4. CI/CD pipeline s GitHub Actions
- `.github/workflows/ci.yml`:
```yaml
name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: echo "Build step"
      - name: Test
        run: echo "Test step"
```

5. Monitoring a alerting (Prometheus, Grafana)
- Spuštění Prometheus a Grafana:
```bash
docker run -d --name prometheus -p 9090:9090 prom/prometheus
# Vlastní konfigurace v prometheus.yml

docker run -d --name grafana -p 3000:3000 grafana/grafana
```
- Přidání metrik: úprava prometheus.yml, přidání endpointu.

6. Bezpečnost: SELinux/AppArmor a audit
- Aktivace SELinux: `sudo setenforce 1`
- Kontrola stavu: `sestatus`
- Audit logů: `sudo ausearch -m avc -ts today`

7. Správa tajemství (Vault, GnuPG)
- HashiCorp Vault:
```bash
vault server -dev &
vault kv put secret/mysecret value=12345
vault kv get secret/mysecret
```
- GnuPG:
```bash
gpg --gen-key
gpg -c tajny_soubor.txt
gpg tajny_soubor.txt.gpg
```

8. Práce s API a integrace
- Ukázkový Python skript:
```python
import requests
r = requests.get('https://api.github.com/users/octocat')
print(r.json())
```
- Automatizace: použij cron nebo systemd timer.

9. Infrastructure as Code s Terraform
- Ukázka main.tf:
```hcl
provider "aws" {
  region = "eu-central-1"
}
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}
```
- Inicializace: `terraform init`
- Aplikace: `terraform apply`

10. Pokročilá správa logů (ELK stack)
- Spuštění ELK stacku (zkráceně):
```bash
docker network create elk
# Elasticsearch
sudo docker run -d --name elasticsearch --net elk -e "discovery.type=single-node" -p 9200:9200 elasticsearch:8.13.4
# Logstash
sudo docker run -d --name logstash --net elk -p 5000:5000 logstash:8.13.4
# Kibana
sudo docker run -d --name kibana --net elk -p 5601:5601 kibana:8.13.4
```
- Konfigurace pipeline v Logstash a vizualizace v Kibana.

Tento soubor obsahuje stručná řešení a příklady ke všem pokročilým úkolům.
