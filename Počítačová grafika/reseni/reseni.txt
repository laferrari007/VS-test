# Řešení úkolů pro předmět: Počítačová grafika
# Vygenerováno: AI
# Datum: 2025-09-15 23:31:15
# POZOR: Řešení odpovídají konkrétním úkolům ze zadání!

Řešení 1: Nakreslení jednoduché 2D postavy pomocí vektorového modelování.

**Postup:**

1. **Nakreslení obličeju:** Použijte křivku pro vektorování obličeje. Zvolte dva body jako ovládací body a vytvořte křivku, která bude reprezentovat tvář.
2. **Nakreslení těla:** Použijte linie pro vektorování těla. Zvolte tři body jako ovládací body a vytvořte tři linie, které budou reprezentovat ruce a nohy.
3. **Nakreslení hlavy:** Použijte kruh pro vektorování hlavy. Vyberte dva body jako ovládací body a vytvořte kruh, který bude reprezentovat hlavu.
4. **Doplňování dalších částí těla:** Použijte další křivky a linie pro doplnění dalších částí těla, jako jsou rty, oční důlky apod.

**Výsledný obrázek:**

Vektorový model 2D postavy bude vypadat jako jednoduchý člověk s obličejem, tělem, hlavou a dalšími částmi těla.

**Kód:**

Vektorový model 2D postavy bude tvořen pomocí kódů v jazyce Python pomocí knihovny matplotlib.

```python
import matplotlib.pyplot as plt
import numpy as np

# Definice křivky obličeje
x1, y1 = 0, 0
x2, y2 = 1, 1
křivka_obličeje = np.linspace(x1, x2, 100)
y_křivka_obličeje = 1 - (křivka_obličeje - x1) ** 2

# Definice linie těla
x3, y3 = 0, 0
x4, y4 = 1, 0
x5, y5 = 0, 1
linie_těla = np.linspace(x3, x4, 100)
y_linie_těla = 0

# Definice kruhu hlavy
x6, y6 = 0, 0
x7, y7 = 1, 1
kruh_hlavy = np.linspace(x6, x7, 100)
y_kruh_hlavy = 1 - (kruh_hlavy - x6) ** 2

# Vykreslení obrázku
plt.plot(křivka_obličeje, y_křivka_obličeje, label='Obličej')
plt.plot(linie_těla, y_linie_těla, label='Tělo')
plt.plot(kruh_hlavy, y_kruh_hlavy, label='Hlava')
plt.legend()
plt.show()
```

Řešení 2: Vytvoření jednoduché animace pohybu 2D objektu pomocí programu Blender.

**Postup:**

1. **Vytvoření objektu:** Vytvořte jednoduchý objekt, jako je kulička, pomocí programu Blender.
2. **Nastavení animace:** Nastavte délku animace na 10 sekund a počet snímků na 30.
3. **Pohyb objektu:** Použijte klávesu W pro pohyb vpřed a klávesu S pro pohyb vzad.
4. **Uložení animace:** Uložte animaci do souboru a otevřete ho v programu Blender.

**Výsledná animace:**

Jednoduchá animace pohybu 2D objektu bude vypadat jako kulička pohybující se vpřed a vzad.

**Kód:**

Animace bude tvořena pomocí kódů v jazyce Python pomocí knihovny bpy.

```python
import bpy
import math

# Vytvoření objektu
objekt = bpy.data.objects.new('Kulička', None)
objekt.location = (0, 0, 0)

# Nastavení animace
animace = bpy.data.actions.new('Animace')
animace.frame_range = (0, 300)

# Pohyb objektu
for i in range(300):
    objekt.location = (i / 10, 0, 0)
    animace.keyframe_insert(data_path='location', frame=i)

# Uložení animace
bpy.data.scenes['Scene'].animation = animace
```

Řešení 3: Nakreslení 3D objektu (nejlépe kouli) pomocí programu Blender a použití různých technik, jako je extrudace, rotace a úprava.

**Postup:**

1. **Vytvoření koule:** Vytvořte kouli pomocí programu Blender.
2. **Extrudace:** Použijte extrudaci pro vytvoření nové koule.
3. **Rotace:** Použijte rotaci pro otočení koule.
4. **Úprava:** Použijte úpravy pro úpravu koule.

**Výsledný obrázek:**

3D objekt koule bude vypadat jako koule s extrudací, rotací a úpravami.

**Kód:**

Objekt bude tvořen pomocí kódů v jazyce Python pomocí knihovny bpy.

```python
import bpy
import math

# Vytvoření koule
koule = bpy.data.objects.new('Koule', None)
koule.location = (0, 0, 0)

# Extrudace
extrudace = koule.modifiers.new('Extrudace', 'EXTRUDE')
extrudace.offset = 0.1

# Rotace
rotace = koule.rotation_euler = (math.pi / 2, 0, 0)

# Úprava
úprava = koule.scale = (2, 2, 2)
```

Řešení 4: Vytvoření jednoduchého shaderu v jazyce Cg pro úpravu barvy 3D objektu.

**Postup:**

1. **Definice shaderu:** Definujte shader pomocí jazyka Cg.
2. **Normal mapping:** Použijte normal mapping pro úpravu barvy objektu.
3. **Speculární mapping:** Použijte speculární mapping pro úpravu barvy objektu.

**Výsledný shader:**

Jednoduchý shader bude vypadat jako shader s normal mappingem a speculárním mappingem.

**Kód:**

Shader bude tvořen pomocí kódů v jazyce Cg.

```c
#version 330 core

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 aTex;

out vec2 vTex;

uniform mat4 model
